// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ADMIN
  TEACHER
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  lastName      String
  email         String    @unique
  password      String
  role          Role      @default(STUDENT)
  borrowedBooks Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
}

model Book {
  id           Int       @id @default(autoincrement())
  name         String
  description  String
  image        String
  createdYear  DateTime  @default(now())
  pages        Int
  authorName   String
  isAvaiable   Boolean   @default(true)
  isBorrowed   Boolean   @default(false)
  isReturned   Boolean   @default(false)
  stockNumber  Int       @default(1)
  serialNumber String    @default("11-22-333")
  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId   Int
  author       Author    @relation(fields: [authorId], references: [id], onDelete: Restrict)
  authorId     Int
  publisherId  Int
  publisher    Publisher @relation(fields: [publisherId], references: [id], onDelete: Restrict)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @default("AAAA")
  books       Book[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Author {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  authorImage String    @default("https://picsum.photos/200/300")
  litPeriod   DateTime  @default(now())
  litPeriodName String  @default("Classicism")
  birthYear   DateTime  @default(now())
  deathYear   DateTime? @default(now())
  books       Book[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Publisher {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  image       String
  books       Book[]
  createdYear DateTime  @default(now())
  deletedYear DateTime? @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Booking {
  id           Int       @id @default(autoincrement())
  bookName     String
  from         DateTime  @default(now())
  to           DateTime  @default(now())
  isExtended   Boolean   @default(false)
  isReturned   Boolean   @default(false)
  userId       Int
  user         User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  returnedDate DateTime? @default(now())
  extendedDate DateTime? @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
}
