# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthorModel {
  birthYear: String!
  books: [BookModel!]!
  createdAt: Date!
  deathYear: String!
  description: String
  id: Int!
  litPeriod: String!
  name: String!
  updatedAt: Date!
}

type BookModel {
  author: AuthorModel
  authorName: String!
  category: CategoryModel
  createdYear: Date!
  description: String!
  id: Int!
  image: String!
  isAvaible: Boolean!
  isBorrowed: Boolean!
  isReturned: Boolean!
  name: String!
  pages: Int!
  publisher: PublisherModel
  serialNumber: String!
  stockNumber: Int!
}

type BookingModel {
  bookName: String!
  extendedDate: Date!
  from: Date!
  id: Int!
  isExtended: Boolean!
  isReturned: Boolean!
  returnedDate: Date!
  to: Date!
  userId: Int!
}

type CategoryModel {
  description: String!
  id: Int!
  name: String!
}

input CreateAuthorInput {
  birthYear: Date!
  deathYear: Date!
  description: String
  litPeriod: Date!
  name: String!
}

input CreateBookInput {
  authorId: Int!
  authorName: String!
  categoryId: Int!
  createdAt: String!
  createdYear: String!
  description: String!
  image: String!
  isAvaiable: Boolean!
  isBorrowed: Boolean!
  isReturned: Boolean!
  name: String!
  pages: Int!
  publisherId: Int!
  serialNumber: String!
  stockNumber: Int!
  updatedAt: String!
}

input CreateBookingType {
  bookName: String!
  extendedDate: String!
  from: String!
  isExtended: Boolean!
  isReturned: Boolean!
  returnedDate: String!
  to: String!
  userId: Float!
}

input CreateCategoryInput {
  createdAt: String!
  description: String!
  name: String!
  updatedAt: String!
}

input CreatePublisherInput {
  createdYear: String!
  description: String!
  image: String!
  name: String!
}

"""Date custom scalar type"""
scalar Date

input ExtendedBookingType {
  extendedDate: String!
  id: Int!
  isExtended: Boolean!
}

input LoginUserType {
  email: String!
  password: String!
  role: String!
}

type Mutation {
  createAuthor(createAuthorInput: CreateAuthorInput!): AuthorModel!
  createBook(createBookInput: CreateBookInput!): BookModel!
  createCategory(createCategoryInput: CreateCategoryInput!): CategoryModel!
  createNewBooking(bookingDto: CreateBookingType!): BookingModel!
  createPublisher(data: CreatePublisherInput!): PublisherModel!
  deleteBook(id: Int!): BookModel!
  deletePublisher(id: Int!): PublisherModel!
  extendedBooking(extendDto: ExtendedBookingType!): BookingModel!
  login(loginUserDto: LoginUserType!): UserModel!
  register(registerUserDto: RegisterUserType!): UserModel!
  removeAuthor(id: Int!): Boolean!
  removeCategory(id: Int!): CategoryModel!
  returnBooking(returnDto: ReturnBookingType!): BookingModel!
  updateAuthor(id: Int!, updateAuthorInput: UpdateAuthorType!): AuthorModel!
  updateBook(id: Int!, updateBookInput: UpdateBookInput!): BookModel!
  updateCategory(id: Int!, updateCategoryInput: UpdateCategoryInput!): CategoryModel!
  updatePublisher(data: UpdatePublisherInput!, id: Int!): PublisherModel!
}

input PaginationAuthorType {
  skip: Int!
  take: Int!
}

input PaginationBookType {
  skip: Int!
  take: Int!
}

input PaginationBookingType {
  skip: Int!
  take: Int!
}

input PaginationCategoryType {
  skip: Int!
  take: Int!
}

type PublisherModel {
  books: BookModel!
  createdYear: Date!
  deletedYear: Date!
  description: String!
  id: Int!
  image: String!
  name: String!
}

type Query {
  allPublishers: [PublisherModel!]!
  author(id: Int!): AuthorModel!
  authors: [AuthorModel!]!
  findAllCategories: [CategoryModel!]!
  findOneCategory(id: Int!): CategoryModel!
  getAllBookings: [BookingModel!]!
  getAllBooks: [BookModel!]!
  getOneBook(id: Int!): BookModel!
  getOneBooking(id: Int!): BookingModel!
  getOneUser(id: Float!): UserModel!
  getPaginationBooks(paginationDto: PaginationBookType!): [BookModel!]!
  getPublisher(id: Int!): PublisherModel!
  me: UserModel!
  paginatedPublishers(skip: Int, take: Int): [PublisherModel!]!
  paginationAuthors(paginationDto: PaginationAuthorType!): [AuthorModel!]!
  paginationBooking(paginationDto: PaginationBookingType!): [BookingModel!]!
  paginationCategories(paginationDto: PaginationCategoryType!): [CategoryModel!]!
  searchAuthors(keyword: String!): [AuthorModel!]!
  searchBooks(keyword: String!): [BookModel!]!
  searchCategories(keyword: String!): [CategoryModel!]!
  searchForBookings(keyword: String!): [BookingModel!]!
  searchPublishers(search: String): [PublisherModel!]!
}

input RegisterUserType {
  email: String!
  lastName: String!
  name: String!
  password: String!
  role: String!
}

input ReturnBookingType {
  id: Int!
  isReturned: Boolean!
  returnedDate: String!
}

type Subscription {
  authorAdded: AuthorModel!
  bookAdded: BookModel!
  bookingCreated: BookingModel!
  bookingExtended: BookingModel!
  bookingReturned: BookingModel!
  categoryAdded: CategoryModel!
  publisherAdded: PublisherModel!
}

input UpdateAuthorType {
  birthYear: Date!
  deathYear: Date!
  description: String
  litPeriod: Date!
  name: String!
}

input UpdateBookInput {
  authorId: Int
  authorName: String
  categoryId: Int
  createdAt: String
  createdYear: String
  description: String
  image: String
  isAvaiable: Boolean
  isBorrowed: Boolean
  isReturned: Boolean
  name: String
  pages: Int
  publisherId: Int
  serialNumber: String
  stockNumber: Int
  updatedAt: String
}

input UpdateCategoryInput {
  createdAt: String
  description: String
  name: String
  updatedAt: String
}

input UpdatePublisherInput {
  deletedYear: Date
  description: String
  image: String
  name: String
}

type UserModel {
  email: String!
  id: Int!
  lastName: String!
  name: String!
  password: String!
  role: String!
}